openapi: 3.0.3
info:
  title: API Endpoints
  description: |
    **Description:**
    This document currently specifies the API endpoints provided by the Authentication module, which is responsible for user account creation and login functionalities in the system.

    **Note:**
    - Passwords are securely hashed using bcrypt before storage.
    - User role is determined by the registration endpoint used (Business/Collector)
  version: 1.0.0

servers:
  - url: "http://localhost:8080"

tags:
  - name: Authentication
    description: Endpoints for user registration and login.
  - name: Admin
    description: Endpoints for administrative user management

paths:
  /auth/register/business:
    post:
      summary: Register a new business user
      tags:
        - Authentication
      description: |
        Creates a new business user with provided credentials and details. 
        Server-side handles role assignment, password hashing, and default values.

        **Required Fields:**
        - role
        - email
        - password_hash
        - full_name
        - business_name
        - business_type
        - registration_number
        - gst_id
        - business_address

        **Optional Fields:**
        - phone_number
        - address
        - profile_image

        **Server-side Defaults:**
        - is_active: true
        - is_verified: false
        - is_flagged: false
        - registration: current timestamp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - email
                - password_hash
                - full_name
                - business_name
                - business_type
                - registration_number
                - gst_id
                - business_address
              properties:
                role:
                  type: string
                  enum: [Business]
                  example: "Business"
                email:
                  type: string
                  format: email
                  example: "business@example.com"
                password_hash:
                  type: string
                  example: "businessPass123!"
                full_name:
                  type: string
                  example: "Business Owner"
                business_name:
                  type: string
                  example: "Eco-Friendly Packaging Co."
                business_type:
                  type: string
                  example: "Manufacturing"
                registration_number:
                  type: string
                  example: "REG-123456"
                gst_id:
                  type: string
                  example: "GSTIN-789456"
                business_address:
                  type: string
                  example: "456 Industry Park, Mumbai"
                phone_number:
                  type: string
                  example: "+919876543210"
                address:
                  type: string
                  example: "123 Business Street"
                profile_image:
                  type: string
                  example: "https://cdn.example.com/business.jpg"
      responses:
        "201":
          description: Business user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  user:
                    type: integer
                    description: The newly created user's ID
              example:
                status: "OK"
                user: 101
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /auth/register/collector:
    post:
      summary: Register a new waste collector user
      tags:
        - Authentication
      description: |
        Creates a new waste collector user with provided credentials and details.
        Server-side handles role assignment, password hashing, and default values.

        **Required Fields:**
        - role
        - email
        - password_hash
        - full_name
        - company_name
        - license_number
        - capacity
        - license_expiry

        **Optional Fields:**
        - phone_number
        - address
        - profile_image

        **Server-side Defaults:**
        - is_active: true
        - is_verified: false
        - is_flagged: false
        - registration: current timestamp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - email
                - password_hash
                - full_name
                - company_name
                - license_number
                - capacity
                - license_expiry
              properties:
                role:
                  type: string
                  enum: [Collector]
                  example: "Collector"
                email:
                  type: string
                  format: email
                  example: "collector@example.com"
                password_hash:
                  type: string
                  example: "collectorPass123!"
                full_name:
                  type: string
                  example: "Waste Collector"
                company_name:
                  type: string
                  example: "Green Waste Management"
                license_number:
                  type: string
                  example: "LIC-789456"
                capacity:
                  type: integer
                  example: 5000
                license_expiry:
                  type: string
                  format: date
                  example: "2025-12-31"
                phone_number:
                  type: string
                  example: "+919876543210"
                address:
                  type: string
                  example: "789 Recycling Lane"
                profile_image:
                  type: string
                  example: "https://cdn.example.com/collector.jpg"
      responses:
        "201":
          description: Collector user created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  user:
                    type: integer
                    description: The newly created user's ID
              example:
                status: "OK"
                user: 102
        "400":
          description: Invalid request body
        "500":
          description: Internal server error

  /auth/login:
    post:
      summary: Authenticate a user and initiate a session
      tags:
        - Authentication
      description: |
        Authenticates a user using email and password. If credentials are valid, 
        the user's last login timestamp is updated.

        **Required Fields:**
        - email
        - password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  example: "mySecurePassword123!"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
              example:
                status: "OK"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                user:
                  userID: 101
                  fullName: "Business Owner"
                  email: "business@example.com"
                  role: "Business"
        "400":
          description: Missing or invalid credentials
        "401":
          description: Invalid login credentials
  /admin/verify/{id}:
    put:
      summary: Verify a user account
      tags: [Admin]
      description: |
        Marks a user as verified (admin-only).
        Requires valid JWT token with Admin role.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to verify
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  Verified User ID:
                    type: string
                    example: "123"
              example:
                status: "OK"
                Verified User ID: "123"
        "401":
          description: Unauthorized (missing/invalid token)
        "403":
          description: Forbidden (non-admin user)
        "500":
          description: Internal server error

  /admin/unverify/{id}:
    put:
      summary: Unverify a user account
      tags: [Admin]
      description: |
        Removes verified status from a user (admin-only).
        Requires valid JWT token with Admin role.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to unverify
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User unverified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  Unverified User ID:
                    type: string
                    example: "123"
              example:
                status: "OK"
                Unverified User ID: "123"
        "401":
          description: Unauthorized (missing/invalid token)
        "403":
          description: Forbidden (non-admin user)
        "500":
          description: Internal server error

  /admin/flag/{id}:
    put:
      summary: Flag a user account
      tags: [Admin]
      description: |
        Flags a user and deactivates their account (admin-only).
        Requires valid JWT token with Admin role.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to flag
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User flagged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  Flagged User ID:
                    type: string
                    example: "123"
              example:
                status: "OK"
                Flagged User ID: "123"
        "401":
          description: Unauthorized (missing/invalid token)
        "403":
          description: Forbidden (non-admin user)
        "500":
          description: Internal server error

  /admin/unflag/{id}:
    put:
      summary: Unflag a user account
      tags: [Admin]
      description: |
        Removes flag from a user and reactivates account (admin-only).
        Requires valid JWT token with Admin role.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: User ID to unflag
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User unflagged successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  Unflagged User ID:
                    type: string
                    example: "123"
              example:
                status: "OK"
                Unflagged User ID: "123"
        "401":
          description: Unauthorized (missing/invalid token)
        "403":
          description: Forbidden (non-admin user)
        "500":
          description: Internal server error
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
